#!/bin/bash

# Created by argbash-init v2.7.0
# ARG_OPTIONAL_SINGLE([project],[p],[GCP project name],[ricardo-dev-ch])
# ARG_OPTIONAL_SINGLE([zone],[z],[Main zone the cluster is running in],[europe-west1-b])
# ARG_OPTIONAL_SINGLE([context],[x],[Desired name of the local context],[dev-honey])
# ARG_POSITIONAL_SINGLE([cluster],[Logical GKE cluster name],[dev-honey])
# ARG_DEFAULTS_POS()
# ARG_HELP([Setup kubectl context for GKE clusters])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='pzxh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_cluster="dev-honey"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_project="ricardo-dev-ch"
_arg_zone="europe-west1-b"
_arg_context="dev-honey"


print_help()
{
	printf '%s\n' "Setup kubectl context for GKE clusters"
	printf 'Usage: %s [-p|--project <arg>] [-z|--zone <arg>] [-x|--context <arg>] [-h|--help] [<cluster>]\n' "$0"
	printf '\t%s\n' "<cluster>: Logical GKE cluster name (default: 'dev-honey')"
	printf '\t%s\n' "-p, --project: GCP project name (default: 'ricardo-dev-ch')"
	printf '\t%s\n' "-z, --zone: Main zone the cluster is running in (default: 'europe-west1-b')"
	printf '\t%s\n' "-x, --context: Desired name of the local context (default: 'dev-honey')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--project)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_project="$2"
				shift
				;;
			--project=*)
				_arg_project="${_key##--project=}"
				;;
			-p*)
				_arg_project="${_key##-p}"
				;;
			-z|--zone)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_zone="$2"
				shift
				;;
			--zone=*)
				_arg_zone="${_key##--zone=}"
				;;
			-z*)
				_arg_zone="${_key##-z}"
				;;
			-x|--context)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_context="$2"
				shift
				;;
			--context=*)
				_arg_context="${_key##--context=}"
				;;
			-x*)
				_arg_context="${_key##-x}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_cluster "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`

if ! hash gcloud 2>/dev/null; then
  echo -e "${red}ERROR\t${reset} gcloud is not installed, get it here: https://cloud.google.com/sdk/install\n"
  exit 1
fi

gcloud config set core/project ${_arg_project}
echo -e "${green}OK\t${reset} set gcloud project to: ${_arg_project}\n"

gcloud container clusters get-credentials --zone ${_arg_zone} ${_arg_cluster}
echo -e "${green}OK\t${reset} downloaded credentials for cluster ${_arg_cluster} in zone ${_arg_zone}\n"

gke_name="gke_${_arg_project}_${_arg_zone}_${_arg_cluster}"
kubectl config get-contexts ${gke_name}

if [ ! "$?" == "0" ]
then
  echo -e "${red}FAIL\t${reset} could not find context according to predefined naming convention in script: ${gke_name}\n"
  return 1
fi

kubectl config set-context ${_arg_context} --cluster ${gke_name} --user ${gke_name}
kubectl config use-context ${_arg_context}
kubectl config delete-context ${gke_name}
echo -e "${green}OK\t${reset} renamed context: ${gke_name} -> ${_arg_context}\n"




# ] <-- needed because of Argbash
